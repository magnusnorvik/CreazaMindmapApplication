@startuml
@startuml

package "Controllers (API)" <<Folder>> {
    class MindmapController {
        -mindmapService: MindmapService
        +getAllMindmaps() : ResponseEntity<List<Mindmap>>
        +getMindmapById(id: Long) : ResponseEntity<Mindmap>
        +save(mindmapRequestData: Mindmap, numberOfSubNodes: int) : ResponseEntity<Mindmap>
        +updateById(mindmapRequestData: Mindmap, id: Long) : ResponseEntity<Mindmap>
        +deleteMindmapById(id: Long) : void

    }
    class TopicNodeController
}

package "Services (UseCases)"<<Folder>> {
    class MindmapService {
        -mindmapRepository: MindmapRepository
        __
        getAll() : List<Mindmap>
        ..
        getById(id: Long) : Mindmap
        ..
        createNew(mindmapRequestData: Mindmap, numberOfSubNodes: int) : Mindmap
        ..
        update(mindmapRequestData: Mindmap, id: Long) : Mindmap
        ..
        deleteById(id: int) : void
    }

    class TopicNodeService
}

package Repositories <<Folder>> {
    interface MindmapRepository
    interface TopicNodeRepository
}

package Models <<Folder>> {
    class Mindmap {
        title: String
        mainNode: TopicNode
    }
    class TopicNode
    class NodeEdge
}



MindmapController --> MindmapService
TopicNodeController --> TopicNodeService

TopicNodeService --> TopicNode
MindmapService --> Mindmap

Mindmap --> TopicNode

TopicNodeService ---> TopicNodeRepository
MindmapService ---> MindmapRepository

TopicNode <-- TopicNodeRepository
TopicNode -left-> NodeEdge
MindmapRepository --> Mindmap
@enduml
@enduml